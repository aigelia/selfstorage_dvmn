import os

from dotenv import load_dotenv
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters

import handlers
from menu_constants import AGREEMENT, MAIN_MENU

HANDLER_MAP = {
    'agreement': handlers.handle_agreement,
    'to_menu': handlers.handle_back_to_menu,
    'main_menu': handlers.handle_main_menu,
    'ask_name': handlers.handle_ask_name,
    'choose_warehouse': handlers.handle_choose_warehouse,
}


def start(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    update.message.reply_text(
        'SelfStorage –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ, —á—Ç–æ –Ω–µ —É–º–µ—â–∞–µ—Ç—Å—è –¥–æ–º–∞!\n\n' 
        'üß• –ó–∏–º–Ω–∏–µ –≤–µ—â–∏, –∫–æ–≥–¥–∞ –Ω–∞ –¥–≤–æ—Ä–µ –ª–µ—Ç–æ\n'
        'üõ∑ –°–Ω–æ—É–±–æ—Ä–¥, —à–∏–Ω—ã, –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã\n'
        'üì¶ –í–µ—â–∏ –Ω–∞ –≤—Ä–µ–º—è –ø–µ—Ä–µ–µ–∑–¥–∞\n'
        'üë∂ –î–µ—Ç—Å–∫–∏–µ –≤–µ—â–∏ ¬´–Ω–∞ –ø–æ—Ç–æ–º¬ª\n'
        'üóÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∞—Ä—Ö–∏–≤—ã (–¥–ª—è –±–∏–∑–Ω–µ—Å–∞)\n'
        'üß≥ –í—Å—ë, —á—Ç–æ –∂–∞–ª–∫–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å, –Ω–æ –Ω–µ–≥–¥–µ –¥–µ—Ä–∂–∞—Ç—å\n\n'
        '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π (–ó–î–ï–°–¨ –ë–£–î–ï–¢ –°–°–´–õ–ö–ê) SelfStorage\n',
        reply_markup=handlers.build_keyboard('agreement', AGREEMENT)
    )


def button_handler(update, context):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    query.answer()
    data = query.data.strip()

    if data in HANDLER_MAP:
        action = data
        param = None
    else:
        if '_' in data:
            action, param = data.rsplit('_', 1)
        else:
            action = data
            param = None
    handler = HANDLER_MAP.get(action)
    if handler:
        handler(update, context, param)
    else:
        query.edit_message_text('–í—ã–±–æ—Ä –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.')


def message_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    current_step = context.user_data.get('current_step')

    if current_step and current_step in HANDLER_MAP:
        HANDLER_MAP[current_step](update, context)
        return


def run_bot():
    load_dotenv()
    tg_token = os.environ['TG_TOKEN']
    notifications_chat_id = os.environ['NOTIFICATIONS_CHAT_ID']

    updater = Updater(tg_token, use_context=True)
    dp = updater.dispatcher
    dp.bot_data['notifications_chat_id'] = notifications_chat_id
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CallbackQueryHandler(button_handler))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, message_handler))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    run_bot()
