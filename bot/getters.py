import os

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'selfstorage.settings')

import django
django.setup()

from selfstorage_db.models import Client, Warehouse
from django.utils import timezone


def create_or_update_client(user_id, full_name=None, phone_number=None, address=None):
    """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    defaults = {}

    if full_name is not None:
        defaults['full_name'] = full_name
    if phone_number is not None:
        defaults['phone_number'] = phone_number
    if address is not None:
        defaults['address'] = address

    client, created = Client.objects.update_or_create(
        user_id=user_id,
        defaults=defaults
    )
    return client


def get_my_storages(user_id):
    """–ü–æ–∫–∞–∂–µ—Ç –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –±–æ–∫—Å—ã –∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ"""
    try:
        client = Client.objects.get(user_id=user_id)
        boxes = client.boxes.filter(is_available=False).select_related('warehouse')

        if not boxes:
            return "–£ –≤–∞—Å –Ω–µ—Ç –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —è—á–µ–µ–∫."

        result = []
        for box in boxes:
            warehouse = box.warehouse
            remaining_days = (box.end_rent_date - timezone.now()).days if box.end_rent_date else 0

            box_info = (
                f"üìç –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞: {warehouse.address}\n"
                f"üì¶ –ë–æ–∫—Å: {box.get_size_display()} (‚Ññ{box.num})\n"
                f"‚è≥ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: –¥–æ {box.end_rent_date.strftime('%d.%m.%Y') if box.end_rent_date else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"‚åõ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days if remaining_days > 0 else '—Å—Ä–æ–∫ –∏—Å—Ç—ë–∫'}\n"
                f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: {box.price} —Ä—É–±./–º–µ—Å\n"
                f"----------------------------------"
            )
            result.append(box_info)

        header = f"üìä –í–∞—à–∏ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —è—á–µ–π–∫–∏ ({len(boxes)}):\n\n"
        return header + "\n\n".join(result)

    except Client.DoesNotExist:
        return "–£ –≤–∞—Å –Ω–µ—Ç –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —è—á–µ–µ–∫."


def get_warehouses():
    """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫–ª–∞–¥—ã –∏–∑ –±–∞–∑—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ['–ù–∞–∑–≤–∞–Ω–∏–µ - –ê–¥—Ä–µ—Å']"""
    return [[f"{w.name} - {w.address}"] for w in Warehouse.objects.all()]
